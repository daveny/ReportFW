@using System.IO
@{
    Layout = "~/Views/Shared/_Layout.cshtml";
    ViewBag.Title = "Metric Editor";

    var templateRoot = Server.MapPath("~/Views/Metrics/Templates");
    var files = Directory.Exists(templateRoot)
    ? Directory.GetFiles(templateRoot, "*.thtml").Select(Path.GetFileName).OrderBy(x => x).ToList()
    : new List<string>();
}

<div class="container-fluid my-4">
    <h2 class="mb-3"><i class="fas fa-edit"></i> Metric Editor</h2>

    @Html.AntiForgeryToken()

    <div class="card mb-3">
        <div class="card-body row g-3 align-items-end">
            <div class="col-md-5">
                <label class="form-label" for="ddlFiles"><strong>Meglévő metrika betöltése</strong></label>
                <select id="ddlFiles" class="form-select">
                    <option value="">-- Válassz egy fájlt --</option>
                    @foreach (var f in files)
                    {
                        <option value="@f">@f</option>
                    }
                </select>
            </div>
            <div class="col-md-2">
                <button id="btnLoad" class="btn btn-primary w-100" type="button"><i class="fas fa-upload"></i> Betöltés</button>
            </div>
            <div class="col-md-5">
                <label class="form-label" for="txtFileName"><strong>Mentés másként vagy új metrika neve</strong></label>
                <div class="input-group">
                    <input id="txtFileName" class="form-control" placeholder="pl. uj_metrika_neve" />
                    <button id="btnNew" class="btn btn-outline-secondary" type="button" title="Új metrika létrehozása"><i class="fas fa-plus"></i> Új</button>
                    <button id="btnSave" class="btn btn-success" type="button" title="Mentés"><i class="fas fa-save"></i> Mentés</button>
                </div>
            </div>
        </div>
    </div>
    <div class="row g-3">
        <div class="col-lg-5 d-flex flex-column">
            <div class="card mb-3">
                <div class="card-header">Metaadatok</div>
                <div class="card-body row g-3">
                    <div class="col-md-6">
                        <label class="form-label">Metric Name</label>
                        <input id="metricName" class="form-control" placeholder="Active Users" />
                    </div>
                    <div class="col-md-6">
                        <label class="form-label">Owner</label>
                        <input id="owner" class="form-control" placeholder="David Nagy" />
                    </div>
                    <div class="col-md-12">
                        <label class="form-label">Description</label>
                        <textarea id="description" class="form-control" rows="2" placeholder="Shows sales totals from FR, DE, CA, and AU..."></textarea>
                    </div>
                </div>
            </div>

            <div class="card mb-3 flex-grow-1 sql-card">
                <div class="card-header">SQL Query</div>
                <div class="card-body">
                    <textarea id="sqlQuery" class="form-control font-monospace" placeholder="SELECT ... FROM ... WHERE ... GROUP BY ..."></textarea>
                </div>
            </div>

            <div class="card mb-3">
                <div class="card-header">Megjelenítés</div>
                <div class="card-body row g-3">
                    <div class="col-md-4">
                        <label class="form-label">Típus</label>
                        <select id="representation" class="form-select">
                            <option value="table">Table</option>
                            <option value="barchart" selected>Bar Chart</option>
                            <option value="linechart">Line Chart</option>
                            <option value="piechart">Pie Chart</option>
                        </select>
                    </div>
                    <div class="col-md-4">
                        <label class="form-label">Érték oszlop (series)</label>
                        <input id="series" class="form-control" placeholder="TotalSales" />
                    </div>
                    <div class="col-md-4">
                        <label class="form-label">Kategória (legends)</label>
                        <input id="legends" class="form-control" placeholder="OrderYear" />
                    </div>
                    <div class="col-md-6">
                        <label class="form-label">Csoportosítás (groupBy)</label>
                        <input id="groupBy" class="form-control" placeholder="CountryRegionCode" />
                    </div>
                </div>
            </div>
            <div class="card mb-3">
                <div class="card-header">Formázás</div>
                <div class="card-body">
                    <div class="mb-3">
                        <label class="form-label">Cím</label>
                        <input id="title" class="form-control" placeholder="Revenue by Country and Year" />
                    </div>
                    <label class="form-label d-flex align-items-center justify-content-between">
                        Érték alapú színezés (valueColors)
                        <button id="btnAddColorPair" class="btn btn-sm btn-outline-secondary" type="button">Szín-érték pár hozzáadása</button>
                    </label>
                    <div id="valueColorPairs" class="vstack gap-2"></div>
                </div>
            </div>
        </div>

        <div class="col-lg-7 d-flex flex-column gap-3">
            <div class="card flex-grow-1">
                <div class="card-header d-flex justify-content-between align-items-center">
                    <span><i class="fas fa-eye"></i> Élő előnézet</span>
                    <button id="btnPreview" class="btn btn-sm btn-primary" type="button"><i class="fas fa-sync-alt"></i> Előnézet frissítése</button>
                </div>
                <div class="card-body">
                    <iframe id="previewFrame" style="width:100%; height: 100%; border:1px solid #e5e5e5; border-radius:8px;"></iframe>
                </div>
            </div>
        </div>
    </div>
</div>

@section scripts{
    <script>
(function(){
  let originalThml = '';
  let originalBlocks = [];
  let chartBlockIndex = -1;

  const ddlFiles = document.getElementById('ddlFiles');
  const btnLoad = document.getElementById('btnLoad');
  const btnNew = document.getElementById('btnNew');
  const btnSave = document.getElementById('btnSave');
  const btnPreview = document.getElementById('btnPreview');
  const fileNameInput = document.getElementById('txtFileName');

  const token = document.querySelector("input[name='__RequestVerificationToken']")?.value || "";

  const metricName = document.getElementById('metricName');
  const owner = document.getElementById('owner');
  const description = document.getElementById('description');
  const sqlQuery = document.getElementById('sqlQuery');
  const representation = document.getElementById('representation');
  const series = document.getElementById('series');
  const legends = document.getElementById('legends');
  const groupBy = document.getElementById('groupBy');
  const title = document.getElementById('title');
  const valueColorPairs = document.getElementById('valueColorPairs');
  const btnAddColorPair = document.getElementById('btnAddColorPair');

  function escapeQuotes(s){ return (s||'').replace(/\\/g,'\\\\').replace(/"/g,'\\"'); }

  function addValueColorPair(val, col){
    const row = document.createElement('div');
    row.className = 'value-color-pair row g-2 align-items-center';
    row.innerHTML = `
      <div class="col-6"><input type="text" class="form-control value-input" placeholder="érték (pl. FR)" value="${val||''}"></div>
      <div class="col-4"><input type="color" class="form-control form-control-color color-input" value="${col||'#000000'}"></div>
      <div class="col-2 text-end"><button type="button" class="btn btn-outline-danger btn-sm btn-remove">X</button></div>`;
    row.querySelector('.btn-remove').addEventListener('click', () => row.remove());
    valueColorPairs.appendChild(row);
  }
  btnAddColorPair.addEventListener('click', () => addValueColorPair('', '#000000'));

  function resetForm(){
    valueColorPairs.innerHTML = '';
    metricName.value = description.value = owner.value = '';
    sqlQuery.value = '';
    representation.value = 'barchart';
    series.value = legends.value = groupBy.value = title.value = '';
  }

  function splitBlocks(th){
    originalBlocks = [];
    chartBlockIndex = -1;
    const re = /\{\{([\s\S]*?)\}\}/g; let m;
    while ((m = re.exec(th)) !== null){
      const inner = m[1];
      const isFilter = /representation\s*=\s*['"]filter['"]/i.test(inner);
      const isChart  = /representation\s*=\s*['"](barchart|linechart|piechart|table)['"]/i.test(inner);
      originalBlocks.push({ full: m[0], inner, isFilter, isChart });
    }
    chartBlockIndex = originalBlocks.findIndex(b => b.isChart);
  }

  function parseAndLoad(thtml){
    originalThml = thtml || '';
    resetForm();
    splitBlocks(originalThml);

    if (!originalThml.trim()) return; // Ne próbálja feldolgozni az üres fájlt

    let success = false;
    const metaMatch = originalThml.match(//);
    if (metaMatch){
      success = true; // Legalább a metaadatokat megtaláltuk
      const m = metaMatch[1];
      const pick = (k)=>{ const rx = new RegExp(k+'\\s*:\\s*([^\\n]+)','i'); const mm = m.match(rx); return mm?mm[1].trim():''; };
      metricName.value = pick('metricName');
      description.value = pick('description');
      owner.value = pick('owner');
    }

    const chartInner = (chartBlockIndex >= 0) ? originalBlocks[chartBlockIndex].inner : '';
    if (chartInner){
      success = true; // A chart blokkot is megtaláltuk
      const qMatch = chartInner.match(/query\s*=\s*["']([\s\S]*?)["']\s*;?/i);
      if (qMatch) sqlQuery.value = qMatch[1].replace(/\\n/g,'\n').replace(/\\"/g,'"').replace(/\\\\/g,'\\');
      const rep = chartInner.match(/representation\s*=\s*["']([^"']+)["']/i); if (rep) representation.value = rep[1];
      const ser = chartInner.match(/series\s*=\s*["']([^"']+)["']/i); if (ser) series.value = ser[1];
      const leg = chartInner.match(/legends\s*=\s*["']([^"']+)["']/i); if (leg) legends.value = leg[1];
      const grp = chartInner.match(/groupby\s*=\s*["']([^"']+)["']/i); if (grp) groupBy.value = grp[1];
      const titleMatch = chartInner.match(/title\s*:\s*["'](.*?)["']/i); if (titleMatch) title.value = titleMatch[1].replace(/\\"/g,'"');
      const colorsBlock = chartInner.match(/valueColors\s*:\s*\{([\s\S]*?)\}/i);
      if (colorsBlock){
        colorsBlock[1].split(/\r?\n/).map(l=>l.trim()).forEach(l=>{
          const m = l.match(/["']([^"']+)["']\s*:\s*["']([^"']+)["']/);
          if (m) addValueColorPair(m[1], m[2]);
        });
      }
    }

    if(!success) {
        throw new Error("A .thtml fájl formátuma nem megfelelő. Nem sikerült metaadatokat vagy chart blokkot találni.");
    }
  }

  function buildChartBlock(){
    const lines = [];
    document.querySelectorAll('#valueColorPairs .value-color-pair').forEach(p=>{
      const key = (p.querySelector('.value-input')?.value || '').trim();
      const col = (p.querySelector('.color-input')?.value || '').trim();
      if (key && col) lines.push('      "'+key+'": "'+col+'"');
    });
    const fmt = [];
    if (title.value.trim()) fmt.push('    title: "'+escapeQuotes(title.value.trim())+'"');
    if (lines.length)       fmt.push('    valueColors: {\n'+lines.join(',\n')+'\n    }');
    const rep = (representation.value || '').trim() || 'barchart';
    const q = (sqlQuery.value || '').replace(/\r/g,'').replace(/\n/g,'\\n');

    return `{{
  query="
${escapeQuotes(q)}
  ";
  representation="${rep}";
  series="${(series.value||'').trim()}";
  legends="${(legends.value||'').trim()}";
  groupby="${(groupBy.value||'').trim()}";
  formatting={
${fmt.length ? fmt.join(',\n') : '    '}
  }
}}`;
  }

  function generateThtml(){
    const newChart = buildChartBlock();
    let final;
    if (originalBlocks.length === 0) {
      final = newChart;
    } else if (chartBlockIndex >= 0) {
      final = originalThml.replace(originalBlocks[chartBlockIndex].full, newChart);
    } else {
      final = originalThml.trim(); if (final && !/\n$/.test(final)) final += '\n\n';
      final += newChart;
    }
    return final;
  }

  function renderPreview(){
    const thtml = generateThtml();
    const url = '@Url.Action("RenderPreview","Editor")';
    const body = new URLSearchParams();
    body.set('__RequestVerificationToken', token);
    body.set('thtmlCode', thtml);

    fetch(url, { method: 'POST', headers: { 'Content-Type': 'application/x-www-form-urlencoded; charset=UTF-8' }, body: body.toString() })
      .then(r => r.text())
      .then(html => {
        const frame = document.getElementById('previewFrame');
        const doc = frame.contentDocument || frame.contentWindow.document;

        doc.open();
        doc.write(`<!doctype html>
<html><head><meta charset="utf-8">
<link rel="stylesheet" href="@Url.Content("~/Content/bootstrap.min.css")">
<link rel="stylesheet" href="@Url.Content("~/Content/datatables.min.css")">
</head><body class="p-2"></body></html>`);
        doc.close();

        const libs = [
          '@Url.Content("~/Scripts/chart.min.js")',
          '@Url.Content("~/Scripts/jquery-3.7.1.min.js")',
          '@Url.Content("~/Scripts/datatables.min.js")'
        ];
        libs.reduce((p, src) => p.then(() => new Promise((res, rej) => {
          const s = doc.createElement('script');
          s.src = src; s.onload = res; s.onerror = () => rej(src); doc.head.appendChild(s);
        })), Promise.resolve()).then(() => {
          doc.body.innerHTML = html;
        }).catch(src => alert('Preview script load error: ' + src));
      })
      .catch(err => alert('Preview error: ' + err));
  }

  // Események
  btnLoad.addEventListener('click', () => {
    const name = ddlFiles.value;
    if (!name){ alert('Válassz egy metrikát!'); return; }

    fetch('@Url.Action("LoadMetric","Editor")?fileName=' + encodeURIComponent(name))
      .then(r => r.ok ? r.text() : Promise.reject(r.status + ' ' + r.statusText))
      .then(txt => {
          fileNameInput.value = name;
          try {
            parseAndLoad(txt);
            renderPreview(); // Automatikus előnézet betöltéskor
          } catch(e) {
            alert('Hiba a fájl feldolgozása közben: ' + e.message);
          }
      })
      .catch(err => alert('Load error: ' + err));
  });

  btnNew.addEventListener('click', () => {
      ddlFiles.value='';
      fileNameInput.value='';
      originalThml='';
      originalBlocks=[];
      chartBlockIndex=-1;
      resetForm();
      const frame = document.getElementById('previewFrame');
      const doc = frame.contentDocument || frame.contentWindow.document;
      if (doc.body) doc.body.innerHTML = '';
  });

  btnPreview.addEventListener('click', () => renderPreview());

  btnSave.addEventListener('click', () => {
    const thtml = generateThtml();
    let name = (fileNameInput.value || '').trim();
    if (!name){ alert('Adj meg fájlnevet (.thtml)!'); return; }
    if (!/\.thtml$/i.test(name)) name += '.thtml';

    const body = new URLSearchParams();
    body.set('__RequestVerificationToken', token);
    body.set('fileName', name);
    body.set('content', thtml);

    fetch('@Url.Action("SaveMetric","Editor")', { method: 'POST', headers: { 'Content-Type': 'application/x-www-form-urlencoded; charset=UTF-8' }, body: body.toString() })
      .then(r => r.json())
      .then(data => {
        if (!data.success) throw new Error(data.message || 'Save failed');
        alert(data.message || 'Saved');
        if (![...ddlFiles.options].some(o => o.value === name)){
          const opt = document.createElement('option'); opt.value = opt.textContent = name; ddlFiles.appendChild(opt);
        }
        ddlFiles.value = name;
      })
      .catch(err => alert('Save error: ' + err.message));
  });

})();
    </script>
    <style>
        .col-lg-7.d-flex > .card {
            height: 85vh; /* Magasság a jobb kihasználtságért */
        }

        #previewFrame {
            min-height: 400px;
        }

        /* Stílusok az SQL panel magasságának növeléséhez */
        .sql-card {
            display: flex;
            flex-direction: column;
        }

            .sql-card .card-body {
                flex-grow: 1;
                display: flex;
                padding: 0; /* Eltávolítjuk a belső paddinget, hogy a textarea kitölthesse */
            }

        #sqlQuery {
            flex-grow: 1;
            border: 0; /* Eltávolítjuk a keretet, mert a card-body már keretezi */
            resize: vertical;
            border-radius: var(--bs-card-inner-border-radius);
            padding: var(--bs-card-cap-padding-y) var(--bs-card-cap-padding-x);
        }
    </style>
}