@using System.IO
@{
    Layout = "~/Views/Shared/_Layout.cshtml";
    ViewBag.Title = "Metric Editor";

    var templateRoot = Server.MapPath("~/Views/Metrics/Templates");
    var files = Directory.Exists(templateRoot)
    ? Directory.GetFiles(templateRoot, "*.thtml").Select(Path.GetFileName).OrderBy(x => x).ToList()
    : new List<string>();
}

<div class="container-fluid my-4">
    <h2 class="mb-3"><i class="fas fa-edit"></i> Metric Editor</h2>

    @Html.AntiForgeryToken()

    <div class="card mb-3">
        <div class="card-body row g-3 align-items-end">
            <div class="col-md-5">
                <label class="form-label" for="ddlFiles"><strong>Meglévő metrika betöltése</strong></label>
                <select id="ddlFiles" class="form-select">
                    <option value="">-- Válassz egy fájlt --</option>
                    @foreach (var f in files)
                    {
                        <option value="@f">@f</option>
                    }
                </select>
            </div>
            <div class="col-md-2">
                <button id="btnLoad" class="btn btn-primary w-100" type="button"><i class="fas fa-upload"></i> Betöltés</button>
            </div>
            <div class="col-md-5">
                <label class="form-label" for="txtFileName"><strong>Mentés másként vagy új metrika neve</strong></label>
<div class="input-group">
    <input id="txtFileName" class="form-control" placeholder="pl. uj_metrika_neve" />
    <button id="btnNew" class="btn btn-outline-secondary" type="button" title="Új metrika létrehozása"><i class="fas fa-plus"></i> Új</button>
    <button id="btnSave" class="btn btn-success" type="button" title="Mentés"><i class="fas fa-save"></i> Mentés</button>
    <button id="btnDelete" class="btn btn-outline-danger" type="button" title="Törlés"><i class="fas fa-trash"></i></button>
</div>
            </div>
        </div>
    </div>
    <div class="row g-3">
        <div class="col-lg-5 d-flex flex-column">
            <div class="card mb-3">
                <div class="card-header">Metaadatok</div>
                <div class="card-body row g-3">
                    <div class="col-md-6">
                        <label class="form-label">Metric Name</label>
                        <input id="metricName" class="form-control" placeholder="Active Users" />
                    </div>
                    <div class="col-md-6">
                        <label class="form-label">Owner</label>
                        <input id="owner" class="form-control" placeholder="David Nagy" />
                    </div>
                    <div class="col-md-12">
                        <label class="form-label">Description</label>
                        <textarea id="description" class="form-control" rows="4" placeholder="Shows sales totals from FR, DE, CA, and AU..."></textarea>
                    </div>
                </div>
            </div>

            <div class="card mb-3 flex-grow-1 sql-card">
                <div class="card-header">SQL Query</div>
                <div class="card-body">
                    <textarea id="sqlQuery" class="form-control font-monospace" rows="12" placeholder="SELECT ... FROM ... WHERE ... GROUP BY ..."></textarea>
                </div>
            </div>

            <div class="card mb-3" id="filtersCard">
                <div class="card-header d-flex justify-content-between align-items-center">
                    <span>Filters</span>
                    <button id="btnAddFilter" type="button" class="btn btn-sm btn-outline-primary">
                        <i class="fas fa-plus"></i> Add filter
                    </button>
                </div>
                <div class="card-body">
                    <div id="filtersList"></div>
                    <div id="noFiltersHint" class="text-muted" style="display:none;">No filters yet. Click "Add filter" to create one.</div>
                </div>
            </div>

            <div class="card mb-3">
                <div class="card-header">Megjelenítés</div>
                <div class="card-body row g-3">
                    <div class="col-md-4">
                        <label class="form-label">Típus</label>
                        <select id="representation" class="form-select">
                            <option value="table">Table</option>
                            <option value="barchart" selected>Bar Chart</option>
                            <option value="linechart">Line Chart</option>
                            <option value="piechart">Pie Chart</option>
                        </select>
                    </div>
                    <div class="col-md-4">
                        <label class="form-label">Érték oszlop (series)</label>
                        <input id="series" class="form-control" placeholder="TotalSales" />
                    </div>
                    <div class="col-md-4">
                        <label class="form-label">Kategória (legends)</label>
                        <input id="legends" class="form-control" placeholder="OrderYear" />
                    </div>
                    <div class="col-md-6">
                        <label class="form-label">Csoportosítás (groupBy)</label>
                        <input id="groupBy" class="form-control" placeholder="CountryRegionCode" />
                    </div>
                </div>
            </div>
            <div class="card mb-3">
                <div class="card-header">Formázás</div>
                <div class="card-body">
                    <div class="mb-3">
                        <label class="form-label">Cím</label>
                        <input id="title" class="form-control" placeholder="Revenue by Country and Year" />
                    </div>
                    <label class="form-label d-flex align-items-center justify-content-between">
                        Érték alapú színezés (valueColors)
                        <button id="btnAddColorPair" class="btn btn-sm btn-outline-secondary" type="button">Szín-érték pár hozzáadása</button>
                    </label>
                    <div id="valueColorPairs" class="vstack gap-2"></div>
                </div>
            </div>
        </div>

        <div class="col-lg-7 d-flex flex-column gap-3">
            <div class="card flex-grow-1">
                <div class="card-header d-flex justify-content-between align-items-center">
                    <span><i class="fas fa-eye"></i> Élő előnézet</span>
                    <button id="btnPreview" class="btn btn-sm btn-primary" type="button"><i class="fas fa-sync-alt"></i> Előnézet frissítése</button>
                </div>
                <div class="card-body">
                    <iframe id="previewFrame" style="width:100%; height: 100%; border:1px solid #e5e5e5; border-radius:8px;"></iframe>
                </div>
            </div>
        </div>
    </div>
</div>

@section scripts{
    <script>
(function(){
  let originalThml = '';
  let originalBlocks = [];
  let chartBlockIndex = -1;

  const ddlFiles = document.getElementById('ddlFiles');
  const btnLoad = document.getElementById('btnLoad');
  const btnNew = document.getElementById('btnNew');
  const btnSave = document.getElementById('btnSave');
  const btnPreview = document.getElementById('btnPreview');
  const btnDelete = document.getElementById('btnDelete');
  const fileNameInput = document.getElementById('txtFileName');

  const token = document.querySelector("input[name='__RequestVerificationToken']")?.value || "";

  const metricName = document.getElementById('metricName');
  const owner = document.getElementById('owner');
  const description = document.getElementById('description');
  const sqlQuery = document.getElementById('sqlQuery');
  const representation = document.getElementById('representation');
  const series = document.getElementById('series');
  const legends = document.getElementById('legends');
  const groupBy = document.getElementById('groupBy');
  const title = document.getElementById('title');
  const valueColorPairs = document.getElementById('valueColorPairs');
  const btnAddColorPair = document.getElementById('btnAddColorPair');

  // --- Filters state + UI ---
  let filters = [];

  function newFilterTemplate() {
    return {
      representation: 'filter',
      type: 'dropdown',
      param: '',
      label: '',
      query: '',
      valueField: '',
      textField: '',
      default: '',
      placeholder: '',
      required: false
    };
  }

  function renderFiltersUI(){
    const list = document.getElementById('filtersList');
    const hint = document.getElementById('noFiltersHint');
    if (!list || !hint) return;
    list.innerHTML = '';
    if (!filters.length){
      hint.style.display = 'block';
      return;
    }
    hint.style.display = 'none';
    filters.forEach((f, idx) => {
      const wrap = document.createElement('div');
      wrap.className = 'filter-item border rounded p-2 mb-2';
      wrap.dataset.index = String(idx);
      wrap.innerHTML = `
        <div class="row g-2 align-items-end">
          <div class="col-12 col-md-3">
            <label class="form-label">Type</label>
            <select class="form-select filter-type">
              <option value="dropdown" ${f.type==='dropdown'?'selected':''}>dropdown</option>
            </select>
          </div>
          <div class="col-12 col-md-3">
            <label class="form-label">Param</label>
            <input type="text" class="form-control filter-param" placeholder="Country" value="${f.param||''}">
          </div>
          <div class="col-12 col-md-3">
            <label class="form-label">Label</label>
            <input type="text" class="form-control filter-label" placeholder="Country:" value="${f.label||''}">
          </div>
          <div class="col-12 col-md-3 text-end">
            <button type="button" class="btn btn-outline-danger btn-filter-remove"><i class="fas fa-trash"></i></button>
          </div>
          <div class="col-12">
            <label class="form-label">Query</label>
            <textarea rows="3" class="form-control filter-query" placeholder="SELECT DISTINCT ...">${(f.query||'').replace(/</g,'&lt;')}</textarea>
          </div>
          <div class="col-12 col-md-3">
            <label class="form-label">valueField</label>
            <input type="text" class="form-control filter-valueField" placeholder="Code" value="${f.valueField||''}">
          </div>
          <div class="col-12 col-md-3">
            <label class="form-label">textField</label>
            <input type="text" class="form-control filter-textField" placeholder="Name" value="${f.textField||''}">
          </div>
        </div>`;
      (function enhanceFilterItem(){
        // add extra type options
        const sel = wrap.querySelector('.filter-type');
        const ensureOpt = (val, text) => {
          if (!sel) return;
          if (![...sel.options].some(o => o.value === val)){
            const o = document.createElement('option'); o.value = val; o.textContent = text; sel.appendChild(o);
          }
        };
        ensureOpt('text','text');
        ensureOpt('datepicker','datepicker');
        if (sel && f.type) sel.value = f.type;

        // add default / placeholder / required controls
        const row = wrap.querySelector('.row');
        if (row){
          const mkCol = (html) => { const d = document.createElement('div'); d.className='col-12 col-md-3'; d.innerHTML=html; return d; };
          const colDef = mkCol('<label class="form-label">Default</label><input type="text" class="form-control filter-default" placeholder="Default value">');
          const colPh  = mkCol('<label class="form-label">Placeholder</label><input type="text" class="form-control filter-placeholder" placeholder="Placeholder (text/date)">');
          const colReq = document.createElement('div'); colReq.className = 'col-12 col-md-3 d-flex align-items-center';
          colReq.innerHTML = '<div class="form-check mt-4"><input class="form-check-input filter-required" type="checkbox" id="tmp_'+(f.param||idx)+'"><label class="form-check-label" for="tmp_'+(f.param||idx)+'">Required</label></div>';
          row.appendChild(colDef); row.appendChild(colPh); row.appendChild(colReq);
          colDef.querySelector('.filter-default').value = f.default || '';
          colPh.querySelector('.filter-placeholder').value = f.placeholder || '';
          colReq.querySelector('.filter-required').checked = !!f.required;
        }

        // show/hide query related blocks based on type
        const toggleByType = () => {
          const t = (sel?.value || 'dropdown');
          const qc = wrap.querySelector('.filter-query')?.parentElement;
          const vc = wrap.querySelector('.filter-valueField')?.parentElement;
          const tc = wrap.querySelector('.filter-textField')?.parentElement;
          const ph = wrap.querySelector('.filter-placeholder')?.closest('.col-12, .col-12 col-md-3') || wrap.querySelector('.filter-placeholder')?.parentElement;
          if (qc) qc.style.display = (t==='dropdown') ? '' : 'none';
          if (vc) vc.style.display = (t==='dropdown') ? '' : 'none';
          if (tc) tc.style.display = (t==='dropdown') ? '' : 'none';
          if (ph) ph.style.display = (t==='dropdown') ? 'none' : '';
        };
        toggleByType();
        if (sel){ sel.addEventListener('change', toggleByType); }
      })();
      list.appendChild(wrap);
    });
  }

  function syncFilterFromDom(item){
    const idx = parseInt(item.dataset.index, 10);
    if (isNaN(idx) || !filters[idx]) return;
    const f = filters[idx];
    f.type = item.querySelector('.filter-type')?.value || 'dropdown';
    f.param = item.querySelector('.filter-param')?.value || '';
    f.label = item.querySelector('.filter-label')?.value || '';
    f.query = item.querySelector('.filter-query')?.value || '';
    f.valueField = item.querySelector('.filter-valueField')?.value || '';
    f.textField = item.querySelector('.filter-textField')?.value || '';
    f.default = item.querySelector('.filter-default')?.value || '';
    f.placeholder = item.querySelector('.filter-placeholder')?.value || '';
    f.required = !!item.querySelector('.filter-required')?.checked;
  }

  (function bindFilterEditors(){
    const list = document.getElementById('filtersList');
    if (!list) return;
    list.addEventListener('input', (e) => {
      const item = e.target.closest('.filter-item');
      if (item) syncFilterFromDom(item);
    });
    list.addEventListener('click', (e) => {
      const btn = e.target.closest('.btn-filter-remove');
      if (!btn) return;
      const item = btn.closest('.filter-item');
      const idx = parseInt(item.dataset.index, 10);
      if (!isNaN(idx)) { filters.splice(idx,1); renderFiltersUI(); }
    });
    const addBtn = document.getElementById('btnAddFilter');
    if (addBtn){
      addBtn.addEventListener('click', () => { filters.push(newFilterTemplate()); renderFiltersUI(); });
    }
  })();

  function escapeQuotes(s){ return (s||'').replace(/\\/g,'\\\\').replace(/"/g,'\\"'); }

  // Cleanup: remove accidental literal "\n" text nodes that may appear from templating
  (function removeBackslashNTextNodes(){
    const root = document.body;
    const walk = (el) => {
      const nodes = Array.from(el.childNodes);
      for (const n of nodes){
        if (n.nodeType === 3 && n.textContent && n.textContent.trim() === "\\n") {
          n.parentNode.removeChild(n);
        } else if (n.nodeType === 1) {
          walk(n);
        }
      }
    };
    walk(root);
  })();

  function addValueColorPair(val, col){
    const row = document.createElement('div');
    row.className = 'value-color-pair row g-2 align-items-center';
    row.innerHTML = `
      <div class="col-6"><input type="text" class="form-control value-input" placeholder="érték (pl. FR)" value="${val||''}"></div>
      <div class="col-4"><input type="color" class="form-control form-control-color color-input" value="${col||'#000000'}"></div>
      <div class="col-2 text-end"><button type="button" class="btn btn-outline-danger btn-sm btn-remove">X</button></div>`;
    row.querySelector('.btn-remove').addEventListener('click', () => row.remove());
    valueColorPairs.appendChild(row);
  }
  btnAddColorPair.addEventListener('click', () => addValueColorPair('', '#000000'));

  function resetForm(){
    valueColorPairs.innerHTML = '';
    metricName.value = description.value = owner.value = '';
    sqlQuery.value = '';
    representation.value = 'barchart';
    series.value = legends.value = groupBy.value = title.value = '';
    filters = [];
    renderFiltersUI();
  }

  function splitBlocks(th){
    originalBlocks = [];
    chartBlockIndex = -1;
    const re = /\{\{([\s\S]*?)\}\}/g; let m;
    while ((m = re.exec(th)) !== null){
      const inner = m[1];
      const isFilter = /representation\s*=\s*['"]filter['"]/i.test(inner);
      const isChart  = /representation\s*=\s*['"](barchart|linechart|piechart|table)['"]/i.test(inner);
      originalBlocks.push({ full: m[0], inner, isFilter, isChart });
    }
    chartBlockIndex = originalBlocks.findIndex(b => b.isChart);
  }

  function parseAndLoad(thtml){
    originalThml = thtml || '';
    resetForm();
    splitBlocks(originalThml);

    if (!originalThml.trim()) return; // Ne próbálja feldolgozni az üres fájlt

    let success = false;
    // Extract meta from HTML comments: <!-- meta-name: ... -->, etc.
    const metaName = (originalThml.match(/<!--\s*meta-name:\s*([\s\S]*?)-->/i) || [])[1] || '';
    const metaDesc = (originalThml.match(/<!--\s*meta-description:\s*([\s\S]*?)-->/i) || [])[1] || '';
    const metaOwner = (originalThml.match(/<!--\s*meta-owner:\s*([\s\S]*?)-->/i) || [])[1] || '';
    const metaString = `metricName: ${metaName}\n description: ${metaDesc}\n owner: ${metaOwner}`;
    const metaMatch = (metaName || metaDesc || metaOwner) ? [null, metaString] : null;
    if (metaMatch){
      success = true; // Legalább a metaadatokat megtaláltuk
      const m = metaMatch[1];
      const pick = (k)=>{ const rx = new RegExp(k+'\\s*:\\s*([^\\n]+)','i'); const mm = m.match(rx); return mm?mm[1].trim():''; };
      metricName.value = pick('metricName');
      description.value = pick('description');
      owner.value = pick('owner');
    }

    // Load filters from existing THTML filter blocks
    filters = [];
    originalBlocks.filter(b => b.isFilter).forEach(b => {
      const obj = newFilterTemplate();
      const lines = b.inner.split(/\r?\n/).map(x=>x.trim()).filter(Boolean);
      for (const line of lines){
        const m = line.match(/^(\w+)\s*=\s*"([\s\S]*?)"\s*;?$/);
        if (!m) continue;
        const key = m[1]; const val = m[2].replace(/\\n/g,'\n').replace(/\\"/g,'"').replace(/\\\\/g,'\\');
        if (key in obj || key === 'representation') obj[key] = val;
      }
      filters.push(obj);
    });
    renderFiltersUI();

    const chartInner = (chartBlockIndex >= 0) ? originalBlocks[chartBlockIndex].inner : '';
    if (chartInner){
      success = true; // A chart blokkot is megtaláltuk
      // Capture with matching quote type so single quotes inside SQL don't terminate the match
      const qMatch = chartInner.match(/query\s*=\s*(["'])([\s\S]*?)\1\s*;?/i);
      if (qMatch) sqlQuery.value = qMatch[2].replace(/\\n/g,'\n').replace(/\\"/g,'"').replace(/\\\\/g,'\\');
      const rep = chartInner.match(/representation\s*=\s*["']([^"']+)["']/i); if (rep) representation.value = rep[1];
      const ser = chartInner.match(/series\s*=\s*["']([^"']+)["']/i); if (ser) series.value = ser[1];
      const leg = chartInner.match(/legends\s*=\s*["']([^"']+)["']/i); if (leg) legends.value = leg[1];
      const grp = chartInner.match(/groupby\s*=\s*["']([^"']+)["']/i); if (grp) groupBy.value = grp[1];
      const titleMatch = chartInner.match(/title\s*:\s*["'](.*?)["']/i); if (titleMatch) title.value = titleMatch[1].replace(/\\"/g,'"');
      const colorsBlock = chartInner.match(/valueColors\s*:\s*\{([\s\S]*?)\}/i);
      if (colorsBlock){
        colorsBlock[1].split(/\r?\n/).map(l=>l.trim()).forEach(l=>{
          const m = l.match(/["']([^"']+)["']\s*:\s*["']([^"']+)["']/);
          if (m) addValueColorPair(m[1], m[2]);
        });
      }
    }

    if(!success) {
        throw new Error("A .thtml fájl formátuma nem megfelelő. Nem sikerült metaadatokat vagy chart blokkot találni.");
    }
  }

  function buildChartBlock(){
    const lines = [];
    document.querySelectorAll('#valueColorPairs .value-color-pair').forEach(p=>{
      const key = (p.querySelector('.value-input')?.value || '').trim();
      const col = (p.querySelector('.color-input')?.value || '').trim();
      if (key && col) lines.push('      "'+key+'": "'+col+'"');
    });
    const fmt = [];
    if (title.value.trim()) fmt.push('    title: "'+escapeQuotes(title.value.trim())+'"');
    if (lines.length)       fmt.push('    valueColors: {\n'+lines.join(',\n')+'\n    }');
    const rep = (representation.value || '').trim() || 'barchart';
    // Tartsuk meg a valós sortöréseket, ne tegyünk \n-t
    const q = (sqlQuery.value || '').replace(/\r/g,'');

    return `{{
  query="
${escapeQuotes(q)}
  ";
  representation="${rep}";
  series="${(series.value||'').trim()}";
  legends="${(legends.value||'').trim()}";
  groupBy="${(groupBy.value||'').trim()}";
  formatting={
${fmt.length ? fmt.join(',\n') : '    '}
  }
}}`;
  }

  function buildFilterBlock(f){
    const kv = [];
    const push = (k,v) => { if (v != null && String(v).length) kv.push(`  ${k}="${escapeQuotes(String(v))}";`); };
    push('representation', 'filter');
    push('type', f.type || 'dropdown');
    push('param', f.param || '');
    push('label', f.label || '');
    // Keep real newlines in query
    const qf = (f.query || '').replace(/\r/g,'');
    kv.push('  query="\n' + escapeQuotes(qf) + '\n  ";');
    push('valueField', f.valueField || '');
    push('textField', f.textField || '');
    push('default', f.default || '');
    push('placeholder', f.placeholder || '');
    if (f.required) kv.push('  required="true";');
    return `{{\n${kv.join('\n')}\n}}`;
  }
  function generateThtml(){
    const newChart = buildChartBlock();
    const newFilters = (filters && filters.length) ? filters.map(buildFilterBlock).join('\n\n') : '';

    // 1) Update or insert meta comment lines from inputs
    const setMeta = (src, key, value) => {
      const clean = (value || '').toString().trim();
      const rx = new RegExp(`<!--\\s*${key}\\s*:\\s*[\\s\\S]*?-->`, 'i');
      const line = clean ? `<!-- ${key}: ${clean} -->` : '';
      if (rx.test(src)) {
        return line ? src.replace(rx, line) : src.replace(rx, '').replace(/^\s*\n/, '');
      } else {
        return line ? (line + "\n" + src) : src;
      }
    };

    let withMeta = originalThml || '';
    // Prepend in reverse order so final order becomes: name, description, owner
    withMeta = setMeta(withMeta, 'meta-owner', owner.value);
    withMeta = setMeta(withMeta, 'meta-description', description.value);
    withMeta = setMeta(withMeta, 'meta-name', metricName.value);

    // Ensure a blank line between meta block and first component
    withMeta = withMeta.replace(/^(<!--[^]*?-->)\s*(?=\{\{|$)/, (m)=> m.replace(/\s*$/, '\n\n'));

    // 2) Remove existing filter and chart blocks, then insert new filters + chart
    let final = withMeta;
    // Remove filter blocks
    originalBlocks.filter(b => b.isFilter).forEach(b => { final = final.replace(b.full, ''); });
    // Remove existing chart (we will append a fresh one)
    if (chartBlockIndex >= 0) {
      final = final.replace(originalBlocks[chartBlockIndex].full, '');
    }
    final = final.trimEnd();
    if (final.length) final += '\n\n';
    if (newFilters) final += newFilters + '\n\n';
    final += newChart;
    return final;
  }

  function renderPreview(){
    const thtml = generateThtml();
    const url = '@Url.Action("RenderPreview","Editor")';

    // Gyűjtsük ki a meglévő előnézetből a szűrők aktuális értékeit
    const framePrev = document.getElementById('previewFrame');
    const prevDoc = framePrev.contentDocument || framePrev.contentWindow?.document;
    const formVals = {};
    if (prevDoc && prevDoc.body){
      prevDoc.querySelectorAll('.filter-control').forEach(el => {
        if (el.name) formVals[el.name] = el.value;
      });
    }

    const body = new URLSearchParams();
    body.set('__RequestVerificationToken', token);
    body.set('thtmlCode', thtml);
    // Addjuk hozzá a paramétereket a POST-hoz
    Object.keys(formVals).forEach(k => body.set(k, formVals[k] ?? ''));

    fetch(url, { method: 'POST', headers: { 'Content-Type': 'application/x-www-form-urlencoded; charset=UTF-8' }, body: body.toString() })
      .then(r => r.text())
      .then(html => {
        const frame = document.getElementById('previewFrame');
        const doc = frame.contentDocument || frame.contentWindow.document;

        doc.open();
        doc.write(`<!doctype html>
<html><head><meta charset="utf-8">
<link rel="stylesheet" href="@Url.Content("~/Content/bootstrap.min.css")">
<link rel="stylesheet" href="@Url.Content("~/Content/datatables.min.css")">
</head><body class="p-2"></body></html>`);
        doc.close();

        const libs = [
          '@Url.Content("~/Scripts/chart.min.js")',
          '@Url.Content("~/Scripts/jquery-3.7.1.min.js")',
          '@Url.Content("~/Scripts/datatables.min.js")'
        ];
        libs.reduce((p, src) => p.then(() => new Promise((res, rej) => {
          const s = doc.createElement('script');
          s.src = src; s.onload = res; s.onerror = () => rej(src); doc.head.appendChild(s);
        })), Promise.resolve()).then(() => {
          // Build a simple tab UI (Metric | THTML)
          doc.body.innerHTML = `
            <div class="container-fluid">
              <ul class="nav nav-tabs" id="previewTabs">
                <li class="nav-item"><a href="#" id="tabMetric" class="nav-link active">Metric</a></li>
                <li class="nav-item"><a href="#" id="tabThtml" class="nav-link">THTML</a></li>
              </ul>
              <div class="border border-top-0 p-2" id="tabContent" style="min-height:360px; border-radius:0 0 .375rem .375rem;">
                <div id="paneMetric"></div>
                <pre id="paneThtml" style="display:none; white-space:pre-wrap; font-family:ui-monospace,Consolas,Monaco,monospace; background:#f8f9fa; padding:12px; border-radius:6px;">
                </pre>
              </div>
            </div>`;

          // Insert rendered HTML and generated thtml
          const paneMetric = doc.getElementById('paneMetric');
          const paneThtml = doc.getElementById('paneThtml');
          paneMetric.innerHTML = html;
          paneThtml.textContent = thtml;

          // Execute inline scripts inside the Metric pane (innerHTML does not run them)
          Array.from(paneMetric.querySelectorAll('script')).forEach(old => {
            const s = doc.createElement('script');
            if (old.textContent) s.text = old.textContent;
            old.parentNode.replaceChild(s, old);
          });

          // Tabs behavior without Bootstrap JS
          const linkMetric = doc.getElementById('tabMetric');
          const linkThtml = doc.getElementById('tabThtml');
          const activate = (name) => {
            if (name === 'metric') {
              linkMetric.classList.add('active'); linkThtml.classList.remove('active');
              paneMetric.style.display='block'; paneThtml.style.display='none';
            } else {
              linkThtml.classList.add('active'); linkMetric.classList.remove('active');
              paneMetric.style.display='none'; paneThtml.style.display='block';
            }
          };
          linkMetric.addEventListener('click', (e)=>{ e.preventDefault(); activate('metric'); });
          linkThtml.addEventListener('click', (e)=>{ e.preventDefault(); activate('thtml'); });
          activate('metric');

          // Auto-refresh on filter change (inside Metric pane)
          Array.from(paneMetric.querySelectorAll('.filter-control')).forEach(el => {
            el.addEventListener('change', () => {
              // jelezzünk a szülőnek
              try { frame.contentWindow.parent.postMessage({ type: 'metric-editor-filter-change' }, '*'); } catch(e) { /* no-op */ }
            });
          });
        }).catch(src => alert('Preview script load error: ' + src));
      })
      .catch(err => alert('Preview error: ' + err));
  }

  // Események
  btnLoad.addEventListener('click', () => {
    const name = ddlFiles.value;
    if (!name){ alert('Válassz egy metrikát!'); return; }

    fetch('@Url.Action("LoadMetric","Editor")?fileName=' + encodeURIComponent(name))
      .then(r => r.ok ? r.text() : Promise.reject(r.status + ' ' + r.statusText))
      .then(txt => {
          fileNameInput.value = name;
          try {
            parseAndLoad(txt);
            renderPreview(); // Automatikus előnézet betöltéskor
          } catch(e) {
            alert('Hiba a fájl feldolgozása közben: ' + e.message);
          }
      })
      .catch(err => alert('Load error: ' + err));
  });

  btnNew.addEventListener('click', () => {
      ddlFiles.value='';
      fileNameInput.value='';
      originalThml='';
      originalBlocks=[];
      chartBlockIndex=-1;
      resetForm();
      const frame = document.getElementById('previewFrame');
      const doc = frame.contentDocument || frame.contentWindow.document;
      if (doc.body) doc.body.innerHTML = '';
  });

  btnPreview.addEventListener('click', () => renderPreview());
  // Üzenet figyelése az iframe-ből (filter változás)
  window.addEventListener('message', (e) => {
    if (e?.data && e.data.type === 'metric-editor-filter-change') {
      renderPreview();
    }
  });

  btnSave.addEventListener('click', () => {
    const thtml = generateThtml();
    let name = (fileNameInput.value || '').trim();
    if (!name){ alert('Adj meg fájlnevet (.thtml)!'); return; }
    if (!/\.thtml$/i.test(name)) name += '.thtml';

    const body = new URLSearchParams();
    body.set('__RequestVerificationToken', token);
    body.set('fileName', name);
    body.set('content', thtml);

    fetch('@Url.Action("SaveMetric","Editor")', { method: 'POST', headers: { 'Content-Type': 'application/x-www-form-urlencoded; charset=UTF-8' }, body: body.toString() })
      .then(r => r.json())
      .then(data => {
        if (!data.success) throw new Error(data.message || 'Save failed');
        alert(data.message || 'Saved');
        if (![...ddlFiles.options].some(o => o.value === name)){
          const opt = document.createElement('option'); opt.value = opt.textContent = name; ddlFiles.appendChild(opt);
        }
        ddlFiles.value = name;
      })
      .catch(err => alert('Save error: ' + err.message));
  });

  // Delete current metric file
  if (btnDelete){
    btnDelete.addEventListener('click', () => {
      let name = (fileNameInput.value || ddlFiles.value || '').trim();
      if (!name){ alert('Nincs kiválasztott fájl.'); return; }
      if (!/\.thtml$/i.test(name)) name += '.thtml';
      if (!confirm('Biztosan törlöd a metrikát: ' + name + ' ?')) return;

      const body = new URLSearchParams();
      body.set('__RequestVerificationToken', token);
      body.set('fileName', name);

      fetch('@Url.Action("DeleteMetric","Editor")', { method: 'POST', headers: { 'Content-Type': 'application/x-www-form-urlencoded; charset=UTF-8' }, body: body.toString() })
        .then(r => r.json())
        .then(data => {
          if (!data.success) throw new Error(data.message || 'Delete failed');
          alert(data.message || 'Deleted');
          // Remove from dropdown
          [...ddlFiles.options].forEach(o => { if (o.value.toLowerCase() === name.toLowerCase()) o.remove(); });
          // Reset form and preview
          ddlFiles.value=''; fileNameInput.value=''; originalThml=''; originalBlocks=[]; chartBlockIndex=-1; resetForm();
          const frame = document.getElementById('previewFrame');
          const doc = frame.contentDocument || frame.contentWindow.document; if (doc.body) doc.body.innerHTML = '';
        })
        .catch(err => alert('Delete error: ' + err.message));
    });
  }

})();
    </script>
    <style>
        .col-lg-7.d-flex > .card {
            height: 85vh; /* Magasság a jobb kihasználtságért */
        }

        #previewFrame {
            min-height: 400px;
        }

        /* Stílusok az SQL panel magasságának növeléséhez */
        .sql-card {
            display: flex;
            flex-direction: column;
        }

            .sql-card .card-body {
                flex-grow: 1;
                display: flex;
                padding: 0; /* Eltávolítjuk a belső paddinget, hogy a textarea kitölthesse */
            }

        #sqlQuery {
            flex-grow: 1;
            border: 0; /* Eltávolítjuk a keretet, mert a card-body már keretezi */
            resize: vertical;
            border-radius: var(--bs-card-inner-border-radius);
            padding: var(--bs-card-cap-padding-y) var(--bs-card-cap-padding-x);
        }
        /* Extra sizing to better fill layout */
        #description { min-height: 120px; }
        #sqlQuery { min-height: 380px; }

        /* Overrides to ensure textareas fill their containers */
        .sql-card .card-body { flex: 1 1 auto; display: flex; min-height: 0; }
        /* Bootstrap template sets a global max-width:280px for textarea; cancel it here */
        #sqlQuery, #description { max-width: none; width: 100%; box-sizing: border-box; }
        #sqlQuery { flex: 1 1 auto; height: 100% !important; }
        #description { height: auto; }
        .sql-card .card-body { flex: 1 1 auto; min-height: 0; }
        #sqlQuery { flex: 1 1 auto; width: 100%; height: 100%; min-height: 0; box-sizing: border-box; }
        /* Ensure SQL textarea shows ~12 lines by default and can be resized */
        #sqlQuery { height: auto !important; min-height: 12em; resize: vertical; }
    </style>
}
